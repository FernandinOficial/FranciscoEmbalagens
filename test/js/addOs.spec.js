//EXECUTAR -> terminal -> npm test
// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const fs = require('fs'); // Para manipulação de arquivos
const path = require('path'); // Para manipulação de caminhos
const assert = require('assert');

// Verifica se o diretório existe e, caso não exista, cria-o
const errorDir = path.join(__dirname, 'test/error');
if (!fs.existsSync(errorDir)) {
    fs.mkdirSync(errorDir, { recursive: true });
}

describe('addOS', function() {
    this.timeout(30000);
    let drivers = []; // Array para armazenar os drivers
    let vars;

    beforeEach(async function() {
        // Criar três instâncias do driver
        for (let i = 0; i < 3; i++) {
            const driver = await new Builder().forBrowser('chrome').build();
            drivers.push(driver);
        }
        vars = {};
    });

    afterEach(async function() {
        // Fechar todos os drivers
        for (const driver of drivers) {
            await driver.quit();
        }
    });

    // Função para tirar captura de tela e salvar no diretório especificado
    async function takeScreenshot(name) {
        const screenshotPath = path.join(errorDir, `${name}.png`);
        const screenshot = await driver.takeScreenshot();
        fs.writeFileSync(screenshotPath, screenshot, 'base64', function(err) {
            if (err) {
                console.error('Erro ao salvar a captura de tela:', err);
            }
        });
    }

    // Função para esperar até que um elemento esteja clicável
    async function waitForElementAndClick(driver, selector) {
        const element = await driver.wait(until.elementLocated(selector), 10000);
        await driver.wait(until.elementIsVisible(element), 10000);
        await driver.wait(until.elementIsEnabled(element), 10000);
        await driver.executeScript("arguments[0].scrollIntoView(true);", element); // Rola até o elemento
        await driver.sleep(500); // Aguarde um pouco para garantir que a rolagem foi concluída
        await element.click();
    }

    it('addOS', async function() {
        const repeatCount = 5; // Número de repetições

        // Para cada driver, executar a tarefa em paralelo
        await Promise.all(drivers.map(async (driver, driverIndex) => {
            for (let i = 0; i < repeatCount; i++) {
                try {
                    console.log(`Executando tentativa ${i + 1} de ${repeatCount} na aba ${driverIndex + 1}`);
                    
                    await driver.get("http://localhost/fernando2024/FranciscoEmbalagens/index.php");
                    await driver.manage().window().setRect({ width: 1050, height: 726 });

                    await waitForElementAndClick(driver, By.id("login"));
                    await waitForElementAndClick(driver, By.id("email"));
                    await driver.findElement(By.id("email")).sendKeys("joao@gmail.com");
                    await waitForElementAndClick(driver, By.id("password"));
                    await driver.findElement(By.id("password")).sendKeys("123");
                    await waitForElementAndClick(driver, By.id("input_submit"));
                    await waitForElementAndClick(driver, By.id("adminCrud"));
                    await waitForElementAndClick(driver, By.linkText("Ordem Serviço"));
                    await waitForElementAndClick(driver, By.name("id_cli"));

                    const clientes = ['Ana Costa', 'Carlos Pereira']; // Lista de clientes
                    for (let j = 0; j < clientes.length; j++) {
                        const dropdown = await driver.findElement(By.name("id_cli"));
                        await dropdown.findElement(By.xpath(`//option[. = '${clientes[j]}']`)).click();
                        await waitForElementAndClick(driver, By.css("button:nth-child(13)")); // Clicar no botão após selecionar o cliente
                    }

                    await waitForElementAndClick(driver, By.css("a > img")); // Clicar no ícone
                    await waitForElementAndClick(driver, By.id("logout")); // Fazer logout
                } catch (error) {
                    console.error('Erro encontrado na aba ' + (driverIndex + 1) + ':', error);
                    await takeScreenshot(`error_screenshot_attempt_${i + 1}_tab_${driverIndex + 1}`); // Chama a função para tirar a captura de tela
                }
            }
        }));
    });
});
